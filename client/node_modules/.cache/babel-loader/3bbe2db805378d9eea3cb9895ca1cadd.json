{"ast":null,"code":"import { takeLatest, put, delay } from \"redux-saga/effects\";\nimport { push } from \"react-router-redux\";\nimport { resetState } from '../actions/resetStateAction';\nimport { ResetPasswordSuccess, ResetPasswordError, SendEmailSuccess, SendEmailError } from \"../actions/resetPasswordAction\";\nimport axios from 'axios';\n\nconst resetPass = function* resetPass({\n  data\n}) {\n  try {\n    const response = yield axios.post('http://localhost:3001/resetPassword', {\n      token: data.token,\n      NewPassword: data.form.password,\n      NewConfimP: data.form.confirmPassword\n    });\n\n    if (response.data.reset) {\n      yield put(ResetPasswordSuccess());\n    } else {\n      yield put(ResetPasswordError(response.data.error));\n    }\n\n    yield delay(4000);\n    yield put(resetState());\n    yield put(push('/login'));\n  } catch (error) {\n    if (error.response) {\n      yield put(ResetPasswordError('Error, please retry'));\n    }\n  }\n};\n\nconst sendEmailS = function* sendEmailS(data) {\n  try {\n    const response = yield axios.post('http://localhost:3001/sendResetEmail', {\n      email: data.data.email\n    });\n\n    if (response.data.sent) {\n      yield put(SendEmailSuccess());\n    } else if (response.data.error === 'Email not found') {\n      yield put(SendEmailError('Email not found'));\n    }\n\n    yield delay(4000);\n    yield put(resetState());\n  } catch (error) {\n    if (error.response) {\n      yield put(SendEmailError('Error sending the email, please retry'));\n    }\n  }\n};\n\nexport default function* rest() {\n  yield takeLatest(\"SEND_EMAIL\", sendEmailS);\n  yield takeLatest(\"RESET_PASSWORD\", resetPass);\n}","map":{"version":3,"sources":["D:/Cursus 1337/Matcha1/client/src/sagas/resetPSaga.js"],"names":["takeLatest","put","delay","push","resetState","ResetPasswordSuccess","ResetPasswordError","SendEmailSuccess","SendEmailError","axios","resetPass","data","response","post","token","NewPassword","form","password","NewConfimP","confirmPassword","reset","error","sendEmailS","email","sent","rest"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,GAApB,EAAyBC,KAAzB,QAAqC,oBAArC;AACA,SAAQC,IAAR,QAAmB,oBAAnB;AACA,SAAQC,UAAR,QAAyB,6BAAzB;AACA,SAASC,oBAAT,EAA+BC,kBAA/B,EAAmDC,gBAAnD,EAAqEC,cAArE,QAA0F,gCAA1F;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAS,GACb,UAAUA,SAAV,CAAqB;AAACC,EAAAA;AAAD,CAArB,EAA6B;AAC3B,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,IAAN,CAAW,qCAAX,EAAkD;AAACC,MAAAA,KAAK,EAAEH,IAAI,CAACG,KAAb;AAAoBC,MAAAA,WAAW,EAAEJ,IAAI,CAACK,IAAL,CAAUC,QAA3C;AAAqDC,MAAAA,UAAU,EAAEP,IAAI,CAACK,IAAL,CAAUG;AAA3E,KAAlD,CAAvB;;AACA,QAAGP,QAAQ,CAACD,IAAT,CAAcS,KAAjB,EACA;AACE,YAAMnB,GAAG,CAACI,oBAAoB,EAArB,CAAT;AACD,KAHD,MAKA;AACE,YAAMJ,GAAG,CAACK,kBAAkB,CAACM,QAAQ,CAACD,IAAT,CAAcU,KAAf,CAAnB,CAAT;AACD;;AACD,UAAMnB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAACG,UAAU,EAAX,CAAT;AACA,UAAMH,GAAG,CAACE,IAAI,CAAC,QAAD,CAAL,CAAT;AACD,GAbD,CAaC,OAAOkB,KAAP,EAAc;AACb,QAAIA,KAAK,CAACT,QAAV,EAAoB;AAClB,YAAMX,GAAG,CAACK,kBAAkB,CAAC,qBAAD,CAAnB,CAAT;AACD;AACF;AACJ,CApBD;;AAsBA,MAAMgB,UAAU,GAChB,UAAUA,UAAV,CAAsBX,IAAtB,EAA4B;AAC1B,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,IAAN,CAAW,sCAAX,EAAmD;AAACU,MAAAA,KAAK,EAAEZ,IAAI,CAACA,IAAL,CAAUY;AAAlB,KAAnD,CAAvB;;AACA,QAAGX,QAAQ,CAACD,IAAT,CAAca,IAAjB,EACA;AACE,YAAMvB,GAAG,CAACM,gBAAgB,EAAjB,CAAT;AACD,KAHD,MAIK,IAAGK,QAAQ,CAACD,IAAT,CAAcU,KAAd,KAAwB,iBAA3B,EACL;AACE,YAAMpB,GAAG,CAACO,cAAc,CAAC,iBAAD,CAAf,CAAT;AACD;;AACD,UAAMN,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAACG,UAAU,EAAX,CAAT;AACD,GAZD,CAYC,OAAOiB,KAAP,EAAc;AACb,QAAIA,KAAK,CAACT,QAAV,EAAoB;AAClB,YAAMX,GAAG,CAACO,cAAc,CAAC,uCAAD,CAAf,CAAT;AACD;AACF;AACF,CAnBD;;AAqBA,eAAe,UAAUiB,IAAV,GAAiB;AAC9B,QAAMzB,UAAU,CAAC,YAAD,EAAesB,UAAf,CAAhB;AACA,QAAMtB,UAAU,CAAC,gBAAD,EAAmBU,SAAnB,CAAhB;AACD","sourcesContent":["import {takeLatest, put, delay} from \"redux-saga/effects\";\r\nimport {push} from \"react-router-redux\";\r\nimport {resetState} from '../actions/resetStateAction';\r\nimport { ResetPasswordSuccess, ResetPasswordError, SendEmailSuccess, SendEmailError} from \"../actions/resetPasswordAction\";\r\nimport axios from 'axios';\r\n\r\nconst resetPass =\r\n  function *resetPass ({data}) {\r\n    try {\r\n      const response = yield axios.post('http://localhost:3001/resetPassword', {token: data.token, NewPassword: data.form.password, NewConfimP: data.form.confirmPassword});\r\n      if(response.data.reset)\r\n      {\r\n        yield put(ResetPasswordSuccess());\r\n      }\r\n      else\r\n      {\r\n        yield put(ResetPasswordError(response.data.error));\r\n      }\r\n      yield delay(4000);\r\n      yield put(resetState());\r\n      yield put(push('/login'));\r\n    }catch (error) {\r\n      if (error.response) {\r\n        yield put(ResetPasswordError('Error, please retry'));\r\n      }\r\n    }\r\n};\r\n\r\nconst sendEmailS =\r\nfunction *sendEmailS (data) {\r\n  try {\r\n    const response = yield axios.post('http://localhost:3001/sendResetEmail', {email: data.data.email});\r\n    if(response.data.sent)\r\n    {\r\n      yield put(SendEmailSuccess());\r\n    }\r\n    else if(response.data.error === 'Email not found')\r\n    {\r\n      yield put(SendEmailError('Email not found'));\r\n    }\r\n    yield delay(4000);\r\n    yield put(resetState());\r\n  }catch (error) {\r\n    if (error.response) {\r\n      yield put(SendEmailError('Error sending the email, please retry'));\r\n    }\r\n  }\r\n};\r\n\r\nexport default function *rest() {\r\n  yield takeLatest(\"SEND_EMAIL\", sendEmailS);\r\n  yield takeLatest(\"RESET_PASSWORD\", resetPass);\r\n}"]},"metadata":{},"sourceType":"module"}