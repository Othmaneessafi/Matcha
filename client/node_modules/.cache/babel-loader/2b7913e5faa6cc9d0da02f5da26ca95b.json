{"ast":null,"code":"import { takeLatest, put, delay } from \"redux-saga/effects\";\nimport { push } from \"react-router-redux\";\nimport { resetState } from '../actions/resetStateAction';\nimport { inscriptionError, inscriptionUserSuccess, EmailConfirmationSuccess, EmailConfirmationError } from \"../actions/registerAction\";\nimport axios from 'axios';\n\nconst inscription = function* inscription({\n  data\n}) {\n  try {\n    const response = yield axios.post('http://localhost:3001/signup', data);\n\n    if (response.data.isValid) {\n      yield put(inscriptionUserSuccess(data));\n      yield put(push(\"/signin\"));\n    } else {\n      if (response.data.errUsername && !response.data.errEmail) {\n        yield put(inscriptionError(response.data.errUsername));\n      } else if (response.data.errEmail && !response.data.errUsername) {\n        yield put(inscriptionError(response.data.errEmail));\n      } else yield put(inscriptionError('Username and email already exist'));\n    }\n\n    yield delay(4000);\n    yield put(resetState());\n  } catch (error) {\n    if (error.response) {\n      yield put(inscriptionError(\"error.response.statusText\", \"error.response.status\"));\n    }\n  }\n};\n\nconst emailConfirm = function* emailConfirm({\n  token\n}) {\n  try {\n    const response = yield axios.post('http://localhost:3001/confirmEmail', {\n      token\n    });\n\n    if (response.data === 'success') {\n      yield put(EmailConfirmationSuccess());\n    } else if (response.data === 'error') {\n      yield put(EmailConfirmationError());\n    }\n  } catch (error) {\n    if (error.response) {\n      yield put(EmailConfirmationError());\n    }\n  }\n};\n\nexport default function* reg() {\n  yield takeLatest(\"INSCRIPTION_USER\", inscription);\n  yield takeLatest(\"EMAIL_CONFIRMATION\", emailConfirm);\n}","map":{"version":3,"sources":["D:/Cursus 1337/Matcha1/client/src/sagas/registerSaga.js"],"names":["takeLatest","put","delay","push","resetState","inscriptionError","inscriptionUserSuccess","EmailConfirmationSuccess","EmailConfirmationError","axios","inscription","data","response","post","isValid","errUsername","errEmail","error","emailConfirm","token","reg"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,GAApB,EAAwBC,KAAxB,QAAoC,oBAApC;AACA,SAAQC,IAAR,QAAmB,oBAAnB;AACA,SAAQC,UAAR,QAAyB,6BAAzB;AACA,SAAQC,gBAAR,EAA0BC,sBAA1B,EAAkDC,wBAAlD,EAA4EC,sBAA5E,QAAyG,2BAAzG;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,GACf,UAAUA,WAAV,CAAuB;AAACC,EAAAA;AAAD,CAAvB,EAA+B;AAC7B,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,IAAN,CAAW,8BAAX,EAA2CF,IAA3C,CAAvB;;AACA,QAAGC,QAAQ,CAACD,IAAT,CAAcG,OAAjB,EAAyB;AACvB,YAAMb,GAAG,CAACK,sBAAsB,CAACK,IAAD,CAAvB,CAAT;AACA,YAAMV,GAAG,CAACE,IAAI,CAAC,SAAD,CAAL,CAAT;AACD,KAHD,MAII;AACF,UAAGS,QAAQ,CAACD,IAAT,CAAcI,WAAd,IAA6B,CAACH,QAAQ,CAACD,IAAT,CAAcK,QAA/C,EAAwD;AACtD,cAAMf,GAAG,CAACI,gBAAgB,CAACO,QAAQ,CAACD,IAAT,CAAcI,WAAf,CAAjB,CAAT;AACD,OAFD,MAGK,IAAGH,QAAQ,CAACD,IAAT,CAAcK,QAAd,IAA0B,CAACJ,QAAQ,CAACD,IAAT,CAAcI,WAA5C,EAAwD;AAC3D,cAAMd,GAAG,CAACI,gBAAgB,CAACO,QAAQ,CAACD,IAAT,CAAcK,QAAf,CAAjB,CAAT;AACD,OAFI,MAIH,MAAMf,GAAG,CAACI,gBAAgB,CAAC,kCAAD,CAAjB,CAAT;AACH;;AACD,UAAMH,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAACG,UAAU,EAAX,CAAT;AACD,GAlBD,CAkBC,OAAOa,KAAP,EAAc;AACb,QAAIA,KAAK,CAACL,QAAV,EAAoB;AAClB,YAAMX,GAAG,CAACI,gBAAgB,CAAC,2BAAD,EAA8B,uBAA9B,CAAjB,CAAT;AACD;AACF;AACF,CAzBH;;AA2BA,MAAMa,YAAY,GAClB,UAAUA,YAAV,CAAwB;AAACC,EAAAA;AAAD,CAAxB,EAAiC;AAC/B,MAAI;AACF,UAAMP,QAAQ,GAAG,MAAMH,KAAK,CAACI,IAAN,CAAW,oCAAX,EAAiD;AAACM,MAAAA;AAAD,KAAjD,CAAvB;;AACA,QAAGP,QAAQ,CAACD,IAAT,KAAkB,SAArB,EACA;AACE,YAAMV,GAAG,CAACM,wBAAwB,EAAzB,CAAT;AACD,KAHD,MAIK,IAAGK,QAAQ,CAACD,IAAT,KAAkB,OAArB,EACL;AACE,YAAMV,GAAG,CAACO,sBAAsB,EAAvB,CAAT;AACD;AACF,GAVD,CAUC,OAAOS,KAAP,EAAc;AACX,QAAIA,KAAK,CAACL,QAAV,EAAoB;AAClB,YAAMX,GAAG,CAACO,sBAAsB,EAAvB,CAAT;AACD;AACF;AACJ,CAjBD;;AAmBA,eAAe,UAAUY,GAAV,GAAgB;AAC7B,QAAMpB,UAAU,CAAC,kBAAD,EAAqBU,WAArB,CAAhB;AACA,QAAMV,UAAU,CAAC,oBAAD,EAAuBkB,YAAvB,CAAhB;AACD","sourcesContent":["import {takeLatest, put,delay} from \"redux-saga/effects\";\r\nimport {push} from \"react-router-redux\";\r\nimport {resetState} from '../actions/resetStateAction';\r\nimport {inscriptionError, inscriptionUserSuccess, EmailConfirmationSuccess, EmailConfirmationError} from \"../actions/registerAction\";\r\nimport axios from 'axios'\r\n\r\nconst inscription =\r\n  function *inscription ({data}) {\r\n    try {\r\n      const response = yield axios.post('http://localhost:3001/signup', data)\r\n      if(response.data.isValid){\r\n        yield put(inscriptionUserSuccess(data));\r\n        yield put(push(\"/signin\"));\r\n      }\r\n      else{\r\n        if(response.data.errUsername && !response.data.errEmail){\r\n          yield put(inscriptionError(response.data.errUsername));\r\n        }\r\n        else if(response.data.errEmail && !response.data.errUsername){\r\n          yield put(inscriptionError(response.data.errEmail));\r\n        }\r\n        else\r\n          yield put(inscriptionError('Username and email already exist'));\r\n      }\r\n      yield delay(4000);\r\n      yield put(resetState());\r\n    }catch (error) {\r\n      if (error.response) {\r\n        yield put(inscriptionError(\"error.response.statusText\", \"error.response.status\"));\r\n      }\r\n    }\r\n  };\r\n\r\nconst emailConfirm =\r\nfunction *emailConfirm ({token}) {\r\n  try {\r\n    const response = yield axios.post('http://localhost:3001/confirmEmail', {token});\r\n    if(response.data === 'success')\r\n    {\r\n      yield put(EmailConfirmationSuccess());\r\n    }\r\n    else if(response.data === 'error')\r\n    {\r\n      yield put(EmailConfirmationError());\r\n    }\r\n  }catch (error) {\r\n      if (error.response) {\r\n        yield put(EmailConfirmationError());\r\n      }\r\n    }\r\n};\r\n\r\nexport default function *reg() {\r\n  yield takeLatest(\"INSCRIPTION_USER\", inscription);\r\n  yield takeLatest(\"EMAIL_CONFIRMATION\", emailConfirm);\r\n}"]},"metadata":{},"sourceType":"module"}